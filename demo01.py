#Пример 1. Бредогенератор

#подключаем библиотеку random, чтобы потом выводить элементы в случайном порядке
import random

#создаем 4 массива, чтобы потом составить фразу из 4 частей. A - это варианты 1 части фразы, B - варианты 2й части фразы, и т.д.
A = ['В частности', 'С другой стороны', 'Однако', 'Аналогично', 'Таким образом', 'Нетрудно видеть, что',
     'Как показывают приведённые выше соображения', 'Например', 'Итак', 'Что касается нашей конкретной задачи, то']
B = ['гиперповерхность в пространстве состояний',
     'постоянный поток эффективной информации',
     'отличительная особенность выбранных критериев',
     'инициация развития критической подсистемы',
     'комплексная программа испытаний',
     'траектория в конфигурационном пространстве',
     'нагруженный несущий элемент',
     'включение дополнительных внутренних связей',
     'независимый принцип функционирования',
     'первичное отношение между подсистемой и технологией подсистемы']
C = ["находит широкое применение и требует", "сводит до минимума затраты при условии",
     "указывает на пределы применимости",
     "свидетельствует о необходимости более тщательного анализа",
     "чрезвычайно усложняется, если не принять во внимание условие",
     "подразумевает более основательное использование теории", "открывает весьма интересные перспективы",
     "признаёт значимость других систем и необходимость", "позволяет эффективно использовать", "требует применения"]
D = ["более тонкой аппаратурной реализации.", "оборудования четвёртого поколения.",
     "тестирования четвёртого поколения.", "проектирования на основе системного подхода.",
     "предварительного отбора данных по определённым критериям.",
     "гибкого, изменяющегося в зависимости от условий, описания.",
     "интеграции и специализации.", "более строгой стандартизации основных модулей.",
     "функционирования в режиме дискретного времени.",
     "разветвления сети сопровождения и поддержки."]


#создаем класс, который хранит список частей фразы и выбирает из него одну случайным образом.
class table:

    #конструктор __init__ инициализирует(создает) этот класс с параметром self и свойством list. Параметр self - обязательный для любого метода класса, параметр list передает в конструктор конкретные фразы
    def __init__(self, list = []):
        #создаем счетчик. Для чего? Чтобы перемещаться по элементам списка list
        i = 0
        #создаем поле для хранения списка частей фразы
        self.list=[]
        #цикл: пока не будет пройдены все элементы списка
        while i < len(list):
            # self.list это поле list класса. Мы в наш класс, в список частей фразы добавляем элементы из входного параметра list
            self.list.append(list[i])
            #увеличиваем счетчик на 1 чтобы перейти к следующему элементу списка list
            i = i + 1
    #создаем метод getElem с параметром self (обязательным), который будет выводить случайный элемент списка list
    def getElem(self):
        #описываем, как он будет работать - он будет выбирать случайный элемент из поля list
        return random.choice(self.list)

#Можно проверить, как выводится случайный элемент списка A:
#A=table(A) - присваиваем............
#print(A.getElem())

#создаем 2й класс, который хранит 4 поля - экземпляры класса table, чтобы потом составить из них фразу.
class simpleBot:
    #создаем поля для хранения частей фразы

#создаем конструктор с обязательным параметром self и 4 атрибутами A,B,C,D
    def __init__(self,A,B,C,D):
        #каждое поле класса simpleBot это экземпляр класса table и отвечает за хранение своей части фразы
        self.A = table(A)
        self.B = table(B)
        self.C = table(C)
        self.D = table(D)
    #создаем метод, который будет создавать целую фразу из 4 частей
    def getPhrase(self):
        #описываем, как он будет работать - он будет складывать случайный элемент из А + пробел + случайный элемент из B + пробел и т.д.
        return self.A.getElem()+" "+self.B.getElem()+" "+self.C.getElem()+" "+self.D.getElem()



Bot=simpleBot(A,B,C,D)

step = int(input("Введите количество фраз: "))
for i in range(step):
    print(Bot.getPhrase())
